# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7bxCUtpGHCEwgT1_1m_lRL3c0rIo2t4
"""


import os
import torch
from pytorch_lightning.callbacks import EarlyStopping, ModelCheckpoint

import wandb
from torch import optim, nn, utils, Tensor
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
import pytorch_lightning as pl
import numpy as np
from torch.utils.data import TensorDataset, DataLoader
from pytorch_lightning import loggers as pl_loggers
from pytorch_lightning.loggers import WandbLogger
import glob
from torch.optim import Optimizer
from torch.optim.lr_scheduler import ReduceLROnPlateau
from scipy.integrate import odeint


def make_weird_data_val(num_points, coef):
    full=coef
    for i in range(num_points):
        full=np.concatenate((full,(full[i:i+1]-full[i+1:i+2]+0.5)/2+np.sin(i)))

    x = full[:num_points]
    y = full[ 2:]

    #coef will be 3
    #y will be num_points, out_dim=1

    x = torch.Tensor(x).unsqueeze(dim=0)
    y = torch.Tensor(y).unsqueeze(dim=0)
    return x,y
def z_derivatives(x, t, g,h,b, input):
    return [x[1]-input, -(1 / x[0]) * (x[1] ** 2 + b * x[1] + g * x[0] - g * h)]
def input_func(input,t, duration):
    return 0.1 * np.sin(2 * np.pi / duration * input* t)
def make_water_data_val(num_points, start=0, end=3):
    duration=end-start
    time = np.arange(start, end, duration/(num_points+1))
    full=np.zeros((num_points+1, 2))

    # full=np.random.rand(num_domains, num_points+1, in_dim)
    full[0, 0]=2e-3
    def gen_func(x, t):
        return z_derivatives(x, t, g, h, b, input_func(input,t,3))

    temp= odeint(gen_func, full[0, :], time)
    full=temp[np.newaxis,:]
    #full 1, num_points+1,2 (1 because one domain, batch first)

    x=full[:, :num_points]
    y=full[:,1:]
    #x,y will be 1, num_points, out_dim=1

    y=torch.Tensor(y)

    # x=torch.Tensor(
    #     np.concatenate(
    #         (x,
    #          input_func(input.reshape((-1,1)),
    #                     time[:-1].reshape((1,-1)),
    #                     duration)[:, :,np.newaxis]), axis=-1))
    x = torch.Tensor(input_func(
                        input,
                        time[:-1].reshape((1, -1)),
                        3)[:, :,np.newaxis])
    #y num_domain, num_points, in_dim, input num_domain, time num_points+1

    return x,y
class linear_relu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ReLU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ReLU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear_elu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ELU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ELU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ReLU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)




class TestInvariant(pl.LightningModule):

    def __init__(self, in_dim, f_embed_dim, g_embed_dim, out_dim, num_domains):
        super().__init__()
        self.invariant = nn.LSTM(in_dim, hidden_size=f_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True)
        self.train_variants = nn.ModuleList(
            [nn.LSTM(in_dim, hidden_size=g_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True) for i in
             range(num_domains)])
        self.test_variant = nn.LSTM(in_dim, hidden_size=g_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True)
        self.num_domains = num_domains
        self.eta = lambda x, y: x + y

        self.loss = nn.MSELoss()

    def forward(self, x):
        result_f = self.invariant(x)
        result_g =self.test_variant(x)

        return self.eta(result_f[0], result_g[0])

    def training_step(self, batch, batch_idx):
        loss=self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx) :
        loss = self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("val_loss", loss)
        return loss

    def configure_optimizers(self):
        optimizer = optim.Adam(self.parameters(), lr=1e-3)

        return optimizer
def get_latest_file():
    list_of_files = glob.glob(os.path.dirname(__file__) + '/DA Thesis/**/*.ckpt',
                              recursive=True)  # * means all if need specific format then *.csv
    latest_file = max(list_of_files, key=os.path.getctime)
    return latest_file
if __name__=="__main__":
    # define any number of nn.Modules (or use your current ones)
    in_dim = 1
    out_dim = 2

    np.random.seed(0)
    torch.use_deterministic_algorithms(True)
    torch.manual_seed(0)
    key="c20d41ecf28a9b0efa2c5acb361828d1319bc62e"

    # input = np.random.normal(2,0.5,)   # m/s
    # g = np.random.normal(9.81, 1)  # m/s^2
    # h = np.random.normal(0.1, 0.01)  # m
    # b = np.random.normal(0.25, 0.025)  # m/s
    input = np.random.normal(2, 1, )  # m/s
    g = np.random.normal(9.81, 2)  # m/s^2
    h = np.random.normal(0.1, 0.02)  # m
    b = np.random.normal(0.25, 0.05)  # m/s

    num_points = 200
    num_val_io_pairs=100
    f_embed_dim = 50
    g_embed_dim=10
    max_epoch=3000

    # train_dataset = TensorDataset(*make_quad_data(num_domains, num_points,train_coef))
    # val_dataset = TensorDataset(*make_quad_data(num_domains, num_points,train_coef))

    train_dataset = TensorDataset(*make_water_data_val(num_val_io_pairs, end=3/(num_points+1)*(num_val_io_pairs+1)))
    val_dataset = TensorDataset(*make_water_data_val(num_points))

    train_loader = DataLoader(train_dataset, batch_size=20, shuffle=True)
    val_loader = DataLoader(val_dataset,batch_size=20)


    tb_logger = pl_loggers.TensorBoardLogger(save_dir="lightning_logs/trash")
    wandb_logger=WandbLogger(project="DA Thesis", name="trash",log_model="True")
    wandb.init() ########################################################
    wandb_logger.experiment.config.update({
                                           "input, g,h,b": (input, g,h,b ),
                                           "num_points": num_points,

                                           "f_embed_dim":f_embed_dim,
                                           "g_embed_dim": g_embed_dim,
                                           "max_epoch": max_epoch,
                                            "num_val_io_pairs":num_val_io_pairs,
                                           "file":os.path.basename(__file__)})

    # base_trans=TestInvariant(in_dim, f_embed_dim=f_embed_dim, g_embed_dim=g_embed_dim,out_dim=out_dim,num_domains=1)

    # list_of_files = glob.glob('DA Thesis/**/*.ckpt', recursive=True)  # * means all if need specific format then *.csv
    # latest_file = max(list_of_files, key=os.path.getctime)
    # base_trans=TestInvariant.load_from_checkpoint(latest_file,
    #                                             in_dim=in_dim, f_embed_dim=f_embed_dim, g_embed_dim=g_embed_dim,out_dim=out_dim,num_domains=1)


    base_trans = TestInvariant.load_from_checkpoint(os.path.dirname(__file__)+"/variant.ckpt",
                                                    in_dim=in_dim, f_embed_dim=f_embed_dim,
                                                    g_embed_dim=g_embed_dim,out_dim=out_dim,num_domains=10)    #
    # for param in base_trans.invariant.parameters():
    #     param.requires_grad = False
    # base_trans.invariant.eval()


    wandb_logger.watch(base_trans, log="all")

    early_stop_callback = EarlyStopping(monitor="val_loss", min_delta=0.00, patience=500)
    model_callback = ModelCheckpoint(
        save_top_k=1,
        monitor="val_loss",
        mode="min",

    )
    trainer1 = pl.Trainer(limit_train_batches=100,
                          logger=wandb_logger,
                          max_epochs=max_epoch,
                          # log_every_n_steps = 5,
                          accelerator="gpu", devices=1,
                          callbacks=[
                              model_callback,
                              early_stop_callback,
                                     # model_checkpoint
                                     ],
                    #   fast_dev_run=True
                      )

    trainer1.fit(base_trans, train_loader, val_loader)

    wandb.save(get_latest_file())