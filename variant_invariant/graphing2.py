# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7bxCUtpGHCEwgT1_1m_lRL3c0rIo2t4
"""


import os
import torch

from torch import optim, nn, utils, Tensor

import pytorch_lightning as pl
import numpy as np

import glob
import matplotlib.pyplot as plt

class linear_relu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ReLU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ReLU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear_elu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ELU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ELU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim)])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)


class TrainInvariant(pl.LightningModule):
    def __init__(self, f_embed_dim, g_embed_dim, out_dim, num_domains):
        super().__init__()
        self.invariant=nn.Linear(f_embed_dim, out_dim)
        self.train_variants=nn.ModuleList([nn.Linear(g_embed_dim, out_dim) for i in range (num_domains)])
        #not used
        self.test_variant=nn.Linear(g_embed_dim, out_dim)
        self.num_domains=num_domains
        self.eta=lambda x,y: x+y

        self.loss=nn.MSELoss()
    def forward(self, x, domain_num):
        #num_points, in_dim
        powers_f = torch.cat([x ** i for i in range(1,f_embed_dim+1)], dim=1)
        powers_g = torch.cat([x ** i for i in range(1,g_embed_dim+1)], dim=1)

        result_f = self.invariant(powers_f)
        result_g =self.train_variants[domain_num](powers_g)

        return self.eta(result_f, result_g)

    def training_step(self, batch, batch_idx):
        # training_step defines the train loop.
        # it is independent of forward

        losses=[self.loss(self(batch[2*i], i), batch[2*i+1]) for i in range (self.num_domains)]
        loss=0
        for i in range(self.num_domains):
            loss+=losses[i]
        loss=loss/len(losses)
        # Logging to TensorBoard (if installed) by default
        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx) :
        losses = [self.loss(self(batch[2*i], i), batch[2*i+1]) for i in range(self.num_domains)]

        loss = 0
        for i in range(self.num_domains):
            loss += losses[i]
        loss = loss / len(losses)        # Logging to TensorBoard (if installed) by default
        self.log("val_loss", loss)
    # def on_fit_end(self):

    def configure_optimizers(self):
        #check if all there
        optimizer = optim.Adam(self.parameters(), lr=1e-3)

        return optimizer

class TestInvariant(pl.LightningModule):

    def __init__(self, in_dim, f_embed_dim, g_embed_dim, out_dim, num_domains):
        super().__init__()
        self.invariant = nn.Linear(f_embed_dim, out_dim)
        self.train_variants = nn.ModuleList([nn.Linear(g_embed_dim, out_dim) for i in range(num_domains)])
        # not used
        self.test_variant = nn.Linear(g_embed_dim, out_dim)
        self.num_domains = num_domains
        self.eta = lambda x, y: x + y

        self.loss = nn.MSELoss()

    def forward(self, x, domain_num):
        # num_points, in_dim
        powers_f = torch.cat([x ** i for i in range(1,f_embed_dim+1)], dim=1)
        powers_g = torch.cat([x ** i for i in range(1,g_embed_dim+1)], dim=1)

        result_f = self.invariant(powers_f)
        result_g = self.test_variant(powers_g)

        return self.eta(result_f, result_g)

    def training_step(self, batch, batch_idx):
        loss=self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx) :
        loss = self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("val_loss", loss)
        return loss

    def configure_optimizers(self):
        optimizer = optim.Adam(self.parameters(), lr=1e-3)

        return optimizer
def get_latest_file():
    list_of_files = glob.glob(os.path.dirname(__file__) + '/DA Thesis/**/*.ckpt',
                              recursive=True)  # * means all if need specific format then *.csv
    latest_file = max(list_of_files, key=os.path.getctime)
    return latest_file
if __name__=="__main__":
    # define any number of nn.Modules (or use your current ones)


    in_dim = 1
    out_dim = 1
    np.random.seed(0)
    torch.use_deterministic_algorithms(True)
    torch.manual_seed(0)

    key="c20d41ecf28a9b0efa2c5acb361828d1319bc62e"
    f_embed_dim = 6
    g_embed_dim = 2
    gen_dim=4
    num_domains = 1

    model_names=["3000.ckpt",
                 "6000.ckpt",
                 # "9000.ckpt",
                 # "12000.ckpt",
                 ]
    # model_names = ["epoch=2999-step=6000.ckpt"
    #                ]
    x=np.arange(0,1,0.05)





    # plot the data
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    all_fs=[]
    all_gs=[]
    for name in model_names:
        base_trans = TrainInvariant.load_from_checkpoint(os.path.dirname(__file__) + '/' + name,
                                                        in_dim=in_dim, f_embed_dim=f_embed_dim, g_embed_dim=g_embed_dim,
                                                        out_dim=out_dim, num_domains=num_domains)
        f_coef = base_trans.invariant.weight.detach().numpy()
        f_bias = base_trans.invariant.bias.detach().numpy()
        f_coef = np.concatenate((f_bias, f_coef[0, :]))

        g_coefs = [np.concatenate((train_variant.bias.detach().numpy(),
                                  train_variant.weight.detach().numpy()[0, :])) for train_variant in base_trans.train_variants]
        f_data = np.array([(f_coef[i] * x ** i) for i in range(f_coef.size)]).sum(axis=0)
        g_data = [np.array([(g_coef[i] * x ** i) for i in range(g_coef.size)]).sum(axis=0) for g_coef in g_coefs]
        all_fs.append(f_data)
        all_gs.append(g_data)

    color = ["red", "orange", "green", "blue", "purple", "gray"]
    #all_fs[model], all_gs[model][variant]
    gen_coef = np.array([[1.26, -18.95, 73.5, -105,50], [0, -18.95, 73.5, -105,50],
                        ])
    other=np.array([[1.26, -18.95, 73.5, -105,50,1]])

    for i in range(len(all_gs[0])):
        #variant (graph)
        for j in range(len(all_gs)):
            #model
            plt.plot(x, all_gs[j][i] + all_fs[j], color='tab:'+color[j], label=str((j+1)*3000))
        plt.plot(x,
                np.array([(gen_coef[i][k] * x ** k) for k in range(gen_coef[i].size)]).sum(axis=0),
                color='tab:'+color[-1], label="actual")
        # plt.plot(x,
        #          np.array([(other[i][k] * x ** k) for k in range(other[i].size)]).sum(axis=0),
        #          color="g", label="start")
        plt.title(str(gen_coef[i]))
        plt.legend()
        plt.show()

        for j in range(len(all_gs)):
            #model
            plt.plot(x, all_fs[j], color='tab:'+"red", label="f")
            plt.plot(x, all_gs[j][i] , color='tab:'+"blue", label="g")
            plt.plot(x,
                np.array([(gen_coef[i][k] * x ** k) for k in range(gen_coef[i].size)]).sum(axis=0),
                color='tab:'+color[-1], label="actual")
            # plt.plot(x,
            #          np.array([(other[i][k] * x ** k) for k in range(other[i].size)]).sum(axis=0),
            #          color='g', label="start")
            plt.plot(x, all_gs[j][i] + all_fs[j], color='tab:'+"purple", label="combined")

            plt.title(str(gen_coef[i])+" "+str((j+1)*3000))
            plt.legend()
            plt.show()

