# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J7bxCUtpGHCEwgT1_1m_lRL3c0rIo2t4
"""


import os
import torch

from torch import optim, nn, utils, Tensor

import pytorch_lightning as pl
import numpy as np

import glob
import matplotlib.pyplot as plt

class linear_relu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ReLU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ReLU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear_elu(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim), nn.ELU()])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))
            self.net.append(nn.ELU())

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)
class linear(nn.Module):
    def __init__(self, in_dim, hidden_dim, out_dim, depth):
        super().__init__()
        self.net = nn.ModuleList([nn.Linear(in_dim, hidden_dim)])
        for i in range(depth):
            self.net.append(nn.Linear(hidden_dim, hidden_dim))

        self.net.append(nn.Linear(hidden_dim, out_dim))
        self.net=nn.Sequential(*self.net)
    def forward(self, x):
        return self.net(x)


class TrainInvariant(pl.LightningModule):
    def __init__(self, f_embed_dim, g_embed_dim, out_dim, num_domains):
        super().__init__()
        self.invariant=nn.Linear(f_embed_dim, out_dim)
        self.train_variants=nn.ModuleList([nn.Linear(g_embed_dim, out_dim) for i in range (num_domains)])
        #not used
        self.test_variant=nn.Linear(g_embed_dim, out_dim)
        self.num_domains=num_domains
        self.eta=lambda x,y: x+y

        self.loss=nn.MSELoss()
    def forward(self, x, domain_num):
        #num_points, in_dim
        powers_f = torch.cat([x ** i for i in range(1,f_embed_dim+1)], dim=1)
        powers_g = torch.cat([x ** i for i in range(1,g_embed_dim+1)], dim=1)

        result_f = self.invariant(powers_f)
        result_g =self.train_variants[domain_num](powers_g)

        return self.eta(result_f, result_g)

    def training_step(self, batch, batch_idx):
        # training_step defines the train loop.
        # it is independent of forward

        losses=[self.loss(self(batch[2*i], i), batch[2*i+1]) for i in range (self.num_domains)]
        loss=0
        for i in range(self.num_domains):
            loss+=losses[i]
        loss=loss/len(losses)
        # Logging to TensorBoard (if installed) by default
        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx) :
        losses = [self.loss(self(batch[2*i], i), batch[2*i+1]) for i in range(self.num_domains)]

        loss = 0
        for i in range(self.num_domains):
            loss += losses[i]
        loss = loss / len(losses)        # Logging to TensorBoard (if installed) by default
        self.log("val_loss", loss)
    # def on_fit_end(self):

    def configure_optimizers(self):
        #check if all there
        optimizer = optim.Adam(self.parameters(), lr=1e-3)

        return optimizer

class TestInvariant(pl.LightningModule):

    def __init__(self, in_dim, f_embed_dim, g_embed_dim, out_dim, num_domains):
        super().__init__()
        self.invariant = nn.LSTM(in_dim, hidden_size=f_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True)
        self.train_variants = nn.ModuleList(
            [nn.LSTM(in_dim, hidden_size=g_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True) for i in
             range(num_domains)])
        self.test_variant = nn.LSTM(in_dim, hidden_size=g_embed_dim, num_layers=2, proj_size=out_dim, batch_first=True)
        self.num_domains = num_domains
        self.eta = lambda x, y: x + y

        self.loss = nn.MSELoss()

    def forward(self, x):
        result_f = self.invariant(x)
        result_g =self.test_variant(x)

        return self.eta(result_f[0], result_g[0])

    def training_step(self, batch, batch_idx):
        loss=self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("train_loss", loss)
        return loss

    def validation_step(self, batch, batch_idx) :
        loss = self.loss(self(batch[0]), batch[1])
        # Logging to TensorBoard (if installed) by default
        self.log("val_loss", loss)
        return loss

    def configure_optimizers(self):
        optimizer = optim.Adam(self.parameters(), lr=1e-3)

        return optimizer
def get_latest_file():
    list_of_files = glob.glob(os.path.dirname(__file__) + '/DA Thesis/**/*.ckpt',
                              recursive=True)  # * means all if need specific format then *.csv
    latest_file = max(list_of_files, key=os.path.getctime)
    return latest_file
def make_weird_data_val(num_points, coef):
    full=coef
    for i in range(num_points):
        full=np.concatenate((full,(full[i:i+1]-full[i+1:i+2]+0.5)/2+np.sin(i)))

    x = full[:num_points]
    y = full[ 2:]

    #coef will be 3
    #y will be num_points, out_dim=1

    x = torch.Tensor(x).unsqueeze(dim=0)
    y = torch.Tensor(y).unsqueeze(dim=0)
    return x,y

if __name__=="__main__":
    # define any number of nn.Modules (or use your current ones)


    in_dim = 1
    out_dim = 1
    np.random.seed(0)
    torch.use_deterministic_algorithms(True)
    torch.manual_seed(0)

    num_points = 50
    num_val_io_pairs=10
    f_embed_dim = 20
    g_embed_dim=10
    max_epoch=1500

    model_names=["variant.ckpt",
                 "nofreeze.ckpt",
                 # "9000.ckpt",
                 # "12000.ckpt",
                 ]
    # model_names = ["epoch=2999-step=6000.ckpt"
    #                ]
    x,y=make_weird_data_val(50,np.array([[0.5488135039273248],[0.7151893663724195]]))
    t=np.arange(50)



    # plot the data

    for name in model_names:
        base_trans = TestInvariant.load_from_checkpoint(os.path.dirname(__file__) + '/' + name,
                                                        in_dim=in_dim, f_embed_dim=f_embed_dim,
                                                        g_embed_dim=g_embed_dim, out_dim=out_dim, num_domains=10)
        f = base_trans.invariant(x)[0].cpu().detach().numpy().squeeze()
        g=base_trans.test_variant(x)[0].cpu().detach().numpy().squeeze()
        plt.plot(t, f,  label="f")
        plt.plot(t, g, label="g")
        plt.plot(t, f+g, label="pred")
        plt.plot(t, y.squeeze().cpu().detach().numpy(), label="actual")
        plt.title(name)
        plt.legend()
        plt.show()

    color = ["red", "orange", "green", "blue", "purple", "gray"]
